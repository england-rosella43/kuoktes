name: CI/pida
on:
  workflow_dispatch:
  
jobs:
  build:
    runs-on: windows-latest
    steps:
      - run: |
          # update WSL, download & install Ubuntu-24.04
          wsl --set-default-version 2; wsl --update; wsl --status;
        
          $distros = (Invoke-RestMethod -Uri https://raw.githubusercontent.com/microsoft/WSL/refs/heads/master/distributions/DistributionInfo.json).Distributions
  
          # github runner does support windows arm64 runners, so we don't need to check the architecture
          $distroDownloadUrl = $distros.Where({ $_.Name -eq 'Ubuntu-24.04' }).Amd64PackageUrl
          Set-Location $env:GITHUB_WORKSPACE\..\.. # don't download in $env:GITHUB_WORKSPACE
          $filename = "Ubuntu-24.04$([System.IO.Path]::GetExtension($distroDownloadUrl))"
          Write-Output 'Downloading and installing the distro...'
          Invoke-WebRequest -Uri $distroDownloadUrl -OutFile $filename
          if ($filename.EndsWith('.appxbundle', [System.StringComparison]::OrdinalIgnoreCase)) {
            Expand-Archive -Path $filename -DestinationPath .\AppxBundle
            Remove-Item -Path $filename -Force # cleanup so we don't fill up the disk unnecessarily
            $filename = (Get-ChildItem -Path .\AppxBundle -Filter *x64*).FullName
          }
          Expand-Archive -Path $filename -DestinationPath .\
          Remove-Item -Path .\AppxBundle -Recurse -Force -ErrorAction SilentlyContinue # cleanup
          # exclude the extra splash and setup exe files that come with "ubuntu" and "ubuntu-22.04" distros
          $distroExe = (Get-ChildItem -Path . -Filter *.exe).Where({ $_.Name -notmatch 'splash|setup' }).FullName
          & $distroExe install --root
          @'
          [boot]
          systemd=true
          '@ | Out-File -FilePath .\wsl.conf -Encoding utf8
            wsl --distribution Ubuntu-24.04 --cd $(Get-Location) cp wsl.conf /etc/wsl.conf
            Write-Output 'Restarting WSL...'
            wsl --shutdown
            # https://learn.microsoft.com/en-us/windows/wsl/wsl-config#the-8-second-rule-for-configuration-changes
            # although the documentation says 8 seconds, we wait for 10 seconds to be safe
            Start-Sleep -Seconds 5
          Write-Output 'Running command to test the installation...'
          Write-Output '-> cat /etc/os-release'
          wsl --distribution Ubuntu-24.04 cat /etc/os-release # print the distro info
          # add a wrapper script to run commands inside wsl easily using run.shell in github workflows
          @'
          @echo off
          FOR /F "usebackq tokens=*" %%F IN (`wsl wslpath '%~1'`) DO SET wslpath=%%F
          wsl -d Ubuntu-24.04 sed -i 's/\r$//' %wslpath%
          wsl -d Ubuntu-24.04 --cd %GITHUB_WORKSPACE% bash --noprofile --norc -eo pipefail %wslpath%
          '@ | Out-File -FilePath $env:RUNNER_TEMP\wsl-run.bat -Encoding utf8
          $env:RUNNER_TEMP >> $env:GITHUB_PATH
        shell: pwsh
      - run: |
          sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update -y
          sudo apt install docker-ce docker-ce-cli containerd.io -y
          docker run hello-world
        shell: wsl-run {0}
