name: CI/pida
on:
  workflow_dispatch:
  
jobs:
  build:
    runs-on: windows-latest
    steps:
      - run: |
          # update WSL, download & install Ubuntu-24.04
          wsl --set-default-version 2; wsl --update; wsl --status;
          if ('Ubuntu-24.04' -eq 'none') {
            Write-Output 'Skipping distro installation...'
            return
          }
          $distros = (Invoke-RestMethod -Uri https://raw.githubusercontent.com/microsoft/WSL/refs/heads/master/distributions/DistributionInfo.json).Distributions
  
          # github runner does support windows arm64 runners, so we don't need to check the architecture
          $distroDownloadUrl = $distros.Where({ $_.Name -eq 'Ubuntu-24.04' }).Amd64PackageUrl
          Set-Location $env:GITHUB_WORKSPACE\..\.. # don't download in $env:GITHUB_WORKSPACE
          $filename = "Ubuntu-24.04$([System.IO.Path]::GetExtension($distroDownloadUrl))"
          Write-Output 'Downloading and installing the distro...'
          Invoke-WebRequest -Uri $distroDownloadUrl -OutFile $filename
  
          Expand-Archive -Path $filename -DestinationPath .\
          Remove-Item -Path .\AppxBundle -Recurse -Force -ErrorAction SilentlyContinue # cleanup
          # exclude the extra splash and setup exe files that come with "ubuntu" and "ubuntu-22.04" distros
          $distroExe = (Get-ChildItem -Path . -Filter *.exe).Where({ $_.Name -notmatch 'splash|setup' }).FullName
          & $distroExe install --root
        shell: pwsh
      - run: |
          sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update -y
          sudo apt install docker-ce docker-ce-cli containerd.io -y
          docker run hello-world
        shell: wsl-run {0}
